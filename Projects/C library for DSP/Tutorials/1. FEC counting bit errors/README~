/////////////////////////////
//       Description       //
/////////////////////////////

This example demonstrates how to count the number of erronous bits between two char arrays.


//////////////////////
//       Flow       //
//////////////////////

The program begins initializing a simple char array containing the values 0-7 called msg. This array represents the original message that is desired to be transmitted.

Then, the message is 'encoded' into another array, msg_encoded. 

No real modification to the original msg is performed during the 'encoding'. It is more of a symbolic thing.

After that, one of the elements in the msg_encoded array are corrupted by flipping one of its bits, which is not in line with the original encoding scheme (that is, doing nothing). 

Then the corrupt msg_encoded is 'decoded' into a third array, msg_decoded. Since no real encoding scheme is being used, each element is simply copied into the destination array.

Finally, the count_bit_errors_array() function is used to count the number of erronous bits found in the decoded message, using the original message as a reference. An unsigned int is returned containing the number of erronous bits.

Then the results are printed.


///////////////////////////
//       Compiling       //
///////////////////////////

gcc -Wall -o fec main.c -lc -lm -lliquid
